// <auto-generated />
using System;
using DNATestSystem.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DNATestSystem.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250711132506_updb1")]
    partial class updb1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.BlogPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("PostId")
                        .HasName("PK__BlogPost__AA126038896BD978");

                    b.HasIndex("AuthorId");

                    b.HasIndex(new[] { "Slug" }, "UQ__BlogPost__BC7B5FB6628EBA0B")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.CollectType", b =>
                {
                    b.Property<int>("CollectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CollectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectTypeId"));

                    b.Property<string>("CollectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CollectName");

                    b.HasKey("CollectTypeId");

                    b.ToTable("CollectType");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.ConsultRequest", b =>
                {
                    b.Property<int>("ConsultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsultID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultId"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("RepliedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ConsultId")
                        .HasName("PK__ConsultR__28859B152268FA69");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("ConsultRequests");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeatureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("FeatureId")
                        .HasName("PK__Features__82230A298C737335");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("ResultId")
                        .HasColumnType("int")
                        .HasColumnName("ResultID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF6DC5A65B1");

                    b.HasIndex("ResultId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime?>("PaidAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.HasKey("InvoiceId")
                        .HasName("PK__Invoice__D796AAD5A8ABCEEA");

                    b.HasIndex("RequestId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.PriceDetail", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PriceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IncludeVat")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price2Samples")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Price3Samples")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<string>("TimeToResult")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("PriceId")
                        .HasName("PK__PriceDet__4957584FE8D57CB9");

                    b.HasIndex("ServiceId");

                    b.ToTable("PriceDetails");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TokenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TokenId")
                        .HasName("PK__RefreshT__658FEE8A6B49B744");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.RequestDeclarant", b =>
                {
                    b.Property<int>("DeclarantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeclarantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeclarantId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("IdentityIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityIssuedPlace")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.HasKey("DeclarantId")
                        .HasName("PK__RequestD__761301B7886F2E3A");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestDeclarants");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3A99E52713");

                    b.HasIndex("FeatureId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.SampleCollectionForm", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CollectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConfirmedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FingerprintImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("HasGeneticDiseaseHistory")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("IdissuedDate")
                        .HasColumnType("date")
                        .HasColumnName("IDIssuedDate");

                    b.Property<string>("IdissuedPlace")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IDIssuedPlace");

                    b.Property<string>("Idnumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IDNumber");

                    b.Property<string>("Idtype")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("IDType");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessID");

                    b.Property<string>("Quantity")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Relationship")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.Property<string>("SampleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Yob")
                        .HasColumnType("int")
                        .HasColumnName("YOB");

                    b.HasKey("CollectionId")
                        .HasName("PK__SampleCo__7DE6BC24DD0B0FC3");

                    b.HasIndex("ProcessId");

                    b.HasIndex("RequestId");

                    b.ToTable("SampleCollectionForm", (string)null);
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<byte?>("NumberSample")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ServiceId")
                        .HasName("PK__Services__C51BB0EA5C24E25B");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.SystemLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LogId")
                        .HasName("PK__SystemLo__5E5499A8FD203F98");

                    b.HasIndex("UserId");

                    b.ToTable("SystemLogs");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestProcess", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProcessID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<DateTime?>("ClaimedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KitCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("ProcessId")
                        .HasName("PK__TestProc__1B39A9765173F1DE");

                    b.HasIndex("RequestId");

                    b.HasIndex("StaffId");

                    b.ToTable("TestProcesses");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CollectID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("RequestId")
                        .HasName("PK__TestRequ__33A8519A9426A80B");

                    b.HasIndex("CollectID");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("TestRequests");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResultID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<DateTime?>("EnteredAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("EnteredBy")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.Property<string>("ResultData")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("int");

                    b.HasKey("ResultId")
                        .HasName("PK__TestResu__97690228838146B3");

                    b.HasIndex("EnteredBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestSample", b =>
                {
                    b.Property<int>("SampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SampleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SampleId"));

                    b.Property<DateTime?>("CollectedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CollectedAt");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OwnerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("RequestID");

                    b.Property<string>("SampleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Yob")
                        .HasColumnType("int")
                        .HasColumnName("YOB");

                    b.HasKey("SampleId")
                        .HasName("PK__TestSamp__8B99EC0A3F1D96F0");

                    b.HasIndex("ProcessId");

                    b.HasIndex("RequestId");

                    b.ToTable("TestSamples");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACB59AC285");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Fingerfile")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IdentityId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ProfileId")
                        .HasName("PK__UserProf__290C888421913B3E");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.UserSelectedService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("ConvertedToRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IncludeVat")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SelectedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PK__UserSele__3214EC271BA82503");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSelectedServices");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.BlogPost", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "Author")
                        .WithMany("BlogPosts")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__BlogPosts__Autho__32E0915F");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.ConsultRequest", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.Service", "Service")
                        .WithMany("ConsultRequests")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__ConsultRe__Servi__XXXXXXX");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "Staff")
                        .WithMany("ConsultRequests")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK__ConsultRe__Staff__68487DD7");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Feedback", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.TestResult", "Result")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ResultId")
                        .HasConstraintName("FK__Feedbacks__Resul__6383C8BA");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Feedbacks__UserI__6477ECF3");

                    b.Navigation("Result");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Invoice", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.TestRequest", "Request")
                        .WithMany("Invoices")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK__Invoice__Request__04E4BC85");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.PriceDetail", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.Service", "Service")
                        .WithMany("PriceDetails")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__PriceDeta__Servi__3E52440B");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.RefreshToken", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__RefreshTo__UserI__6B24EA82");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.RequestDeclarant", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.TestRequest", "Request")
                        .WithMany("RequestDeclarants")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK__RequestDe__Reque__75A278F5");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Role", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.Feature", null)
                        .WithMany("Roles")
                        .HasForeignKey("FeatureId");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.SampleCollectionForm", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.TestProcess", "Process")
                        .WithMany("SampleCollectionForms")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK__SampleCol__Proce__7D439ABD");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.TestRequest", "Request")
                        .WithMany("SampleCollectionForms")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK__SampleCol__Reque__7C4F7684");

                    b.Navigation("Process");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.SystemLog", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "User")
                        .WithMany("SystemLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__SystemLog__UserI__36B12243");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestProcess", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.TestRequest", "Request")
                        .WithMany("TestProcesses")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK__TestProce__Reque__4CA06362");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "Staff")
                        .WithMany("TestProcesses")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK__TestProce__Staff__4D94879B");

                    b.Navigation("Request");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestRequest", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.CollectType", "CollectType")
                        .WithMany("TestRequests")
                        .HasForeignKey("CollectID");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.Service", "Service")
                        .WithMany("TestRequests")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__TestReque__Servi__48CFD27E");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "User")
                        .WithMany("TestRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__TestReque__UserI__47DBAE45");

                    b.Navigation("CollectType");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestResult", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "EnteredByNavigation")
                        .WithMany("TestResultEnteredByNavigations")
                        .HasForeignKey("EnteredBy")
                        .HasConstraintName("FK__TestResul__Enter__5CD6CB2B");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.TestRequest", "Request")
                        .WithMany("TestResults")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK__TestResul__Reque__5BE2A6F2");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "VerifiedByNavigation")
                        .WithMany("TestResultVerifiedByNavigations")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK__TestResul__Verif__5DCAEF64");

                    b.Navigation("EnteredByNavigation");

                    b.Navigation("Request");

                    b.Navigation("VerifiedByNavigation");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestSample", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.TestProcess", "Process")
                        .WithMany("TestSamples")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("FK__TestSampl__Proce__5165187F");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.TestRequest", "Request")
                        .WithMany("TestSamples")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK__TestSampl__Reque__5070F446");

                    b.Navigation("Process");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.User", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Users__RoleID__2C3393D0");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.UserProfile", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserProfi__UserI__2F10007B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.UserSelectedService", b =>
                {
                    b.HasOne("DNATestSystem.BusinessObjects.Models.Service", "Service")
                        .WithMany("UserSelectedServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__UserSelec__Servi__4222D4EF");

                    b.HasOne("DNATestSystem.BusinessObjects.Models.User", "User")
                        .WithMany("UserSelectedServices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserSelec__UserI__412EB0B6");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.CollectType", b =>
                {
                    b.Navigation("TestRequests");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Feature", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.Service", b =>
                {
                    b.Navigation("ConsultRequests");

                    b.Navigation("PriceDetails");

                    b.Navigation("TestRequests");

                    b.Navigation("UserSelectedServices");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestProcess", b =>
                {
                    b.Navigation("SampleCollectionForms");

                    b.Navigation("TestSamples");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestRequest", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("RequestDeclarants");

                    b.Navigation("SampleCollectionForms");

                    b.Navigation("TestProcesses");

                    b.Navigation("TestResults");

                    b.Navigation("TestSamples");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.TestResult", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("DNATestSystem.BusinessObjects.Models.User", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("ConsultRequests");

                    b.Navigation("Feedbacks");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SystemLogs");

                    b.Navigation("TestProcesses");

                    b.Navigation("TestRequests");

                    b.Navigation("TestResultEnteredByNavigations");

                    b.Navigation("TestResultVerifiedByNavigations");

                    b.Navigation("UserProfiles");

                    b.Navigation("UserSelectedServices");
                });
#pragma warning restore 612, 618
        }
    }
}
