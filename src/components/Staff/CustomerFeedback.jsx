import React, { useState } from 'react';
import { Container, Row, Col, Table, Form, Button, Badge, Modal, Card, InputGroup } from 'react-bootstrap';

const CustomerFeedback = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('T·∫•t c·∫£');
  const [selectedFeedback, setSelectedFeedback] = useState(null);
  const [showModal, setShowModal] = useState(false);

  const mockFeedback = [
    {
      id: 'FB001',
      customerName: 'Nguy·ªÖn Th·ªã Lan',
      email: 'lan.nguyen@email.com',
      phone: '0987654321',
      subject: 'D·ªãch v·ª• t·ªët, nh√¢n vi√™n th√¢n thi·ªán',
      content: 'T√¥i r·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª• x√©t nghi·ªám ADN t·∫°i trung t√¢m. Nh√¢n vi√™n r·∫•t chuy√™n nghi·ªáp v√† th√¢n thi·ªán.',
      date: '15/12/2024',
      status: 'M·ªõi',
      rating: 5
    },
    {
      id: 'FB002',
      customerName: '·∫®n danh',
      email: '',
      phone: '',
      subject: 'Th·ªùi gian ch·ªù h∆°i l√¢u',
      content: 'D·ªãch v·ª• ·ªïn nh∆∞ng th·ªùi gian ch·ªù k·∫øt qu·∫£ h∆°i l√¢u so v·ªõi d·ª± ki·∫øn.',
      date: '14/12/2024',
      status: 'ƒê√£ xem',
      rating: 3
    },
    {
      id: 'FB003',
      customerName: 'Tr·∫ßn VƒÉn Minh',
      email: 'minh.tran@email.com',
      phone: '0123456789',
      subject: 'R·∫•t h√†i l√≤ng v·ªõi quy tr√¨nh',
      content: 'Quy tr√¨nh l·∫•y m·∫´u t·∫°i nh√† r·∫•t ti·ªán l·ª£i. Nh√¢n vi√™n ƒë·∫øn ƒë√∫ng gi·ªù v√† h∆∞·ªõng d·∫´n r·∫•t t·∫≠n t√¨nh.',
      date: '13/12/2024',
      status: 'M·ªõi',
      rating: 4
    }
  ];

  const getStatusVariant = (status) => {
    return status === 'M·ªõi' ? 'primary' : 'secondary';
  };

  const getRatingStars = (rating) => {
    return '‚òÖ'.repeat(rating) + '‚òÜ'.repeat(5 - rating);
  };

  const handleViewDetail = (feedback) => {
    setSelectedFeedback(feedback);
    setShowModal(true);
  };

  const handleMarkAsReviewed = () => {
    if (selectedFeedback && selectedFeedback.status === 'M·ªõi') {
      console.log(`Marking feedback ${selectedFeedback.id} as reviewed`);
      setSelectedFeedback({...selectedFeedback, status: 'ƒê√£ xem'});
    }
  };

  const filteredFeedback = mockFeedback.filter(feedback => {
    const matchesSearch = feedback.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         feedback.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         feedback.subject.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'T·∫•t c·∫£' || feedback.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  return (
    <Container fluid className="customer-feedback">
      <Row className="mb-4">
        <Col>
          <h1>Ph·∫£n h·ªìi t·ª´ kh√°ch h√†ng</h1>
        </Col>
      </Row>
      
      <Row className="mb-4">
        <Col md={6}>
          <InputGroup>
            <Form.Control
              type="text"
              placeholder="T√¨m ki·∫øm ph·∫£n h·ªìi"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </InputGroup>
        </Col>
        <Col md={3}>
          <Form.Select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option>T·∫•t c·∫£</option>
            <option>M·ªõi</option>
            <option>ƒê√£ xem</option>
          </Form.Select>
        </Col>
      </Row>

      <Table striped bordered hover responsive>
        <thead className="table-dark">
          <tr>
            <th>ID Ph·∫£n h·ªìi</th>
            <th>T√™n kh√°ch h√†ng</th>
            <th>Ti√™u ƒë·ªÅ/T√≥m t·∫Øt</th>
            <th>ƒê√°nh gi√°</th>
            <th>Ng√†y g·ª≠i</th>
            <th>Tr·∫°ng th√°i</th>
            <th>Thao t√°c</th>
          </tr>
        </thead>
        <tbody>
          {filteredFeedback.map(feedback => (
            <tr key={feedback.id}>
              <td><strong>{feedback.id}</strong></td>
              <td>{feedback.customerName || '·∫®n danh'}</td>
              <td>{feedback.subject}</td>
              <td>
                <span className="text-warning">
                  {getRatingStars(feedback.rating)}
                </span>
              </td>
              <td>{feedback.date}</td>
              <td>
                <Badge bg={getStatusVariant(feedback.status)}>
                  {feedback.status}
                </Badge>
              </td>
              <td>
                <Button
                  variant="outline-primary"
                  size="sm"
                  onClick={() => handleViewDetail(feedback)}
                >
                  üëÅÔ∏è Xem chi ti·∫øt
                </Button>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      {/* Feedback Detail Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>Chi ti·∫øt ph·∫£n h·ªìi - {selectedFeedback?.id}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedFeedback && (
            <>
              <Card className="mb-3">
                <Card.Body>
                  <h5>Th√¥ng tin kh√°ch h√†ng</h5>
                  <p><strong>T√™n kh√°ch h√†ng:</strong> {selectedFeedback.customerName || '·∫®n danh'}</p>
                  {selectedFeedback.email && (
                    <p><strong>Email:</strong> {selectedFeedback.email}</p>
                  )}
                  {selectedFeedback.phone && (
                    <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {selectedFeedback.phone}</p>
                  )}
                  <p>
                    <strong>ƒê√°nh gi√°:</strong> 
                    <span className="text-warning ms-2">
                      {getRatingStars(selectedFeedback.rating)} ({selectedFeedback.rating}/5)
                    </span>
                  </p>
                </Card.Body>
              </Card>

              <Card>
                <Card.Body>
                  <h5>N·ªôi dung ph·∫£n h·ªìi</h5>
                  <p>{selectedFeedback.content}</p>
                </Card.Body>
              </Card>
            </>
          )}
        </Modal.Body>
        <Modal.Footer>
          {selectedFeedback?.status === 'M·ªõi' && (
            <Button variant="success" onClick={handleMarkAsReviewed}>
              ƒê√°nh d·∫•u ƒë√£ xem
            </Button>
          )}
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            ƒê√≥ng
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default CustomerFeedback;